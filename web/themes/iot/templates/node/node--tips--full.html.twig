{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

<article class="tip-article tip-article-detail">
    {% if node.field_image %}
        <img alt="" src="{{ file_url(node.field_image.entity.uri.value) }}">
    {% endif %}
    <h3>
        <a>{{ node.title.value }}</a>
    </h3>
    <div class="test-vote small">
        {{ star_rate }}
    </div>
    <div class="ta-meta">
        {% if term %}
        <div class="box-tag">
            <span class="tag-icon"></span>
            <a href="{{ term_uri }}" class="tag-item tag-item-bg">{{ term.name.value }} </a>
            {% for tag in tags %}
                <a href="{{ tag.tag_uri }}" class="tag-item tag-item-bg">{{ tag.tag.name.value }} </a>
            {% endfor %}
        </div>
        {% endif %}

        <div class="test-des">
            <p><span class="icon-ts icon-view"></span> {{ views }}</p>
            <p><span class="icon-ts icon-calendar"></span> {% set date = node.createdtime|date('d M Y') %}{{ date }}</p>
        </div>
        <div class="clearfix">
        </div>
    </div>
    <div class="ta-content">
        {% if node.field_standfirst.value %}
          <div class="standfirst">{{ node.field_standfirst.value|raw }}</div>
        {% endif %}
        {{ node.body.value|raw }}
    </div>
    <div class="share-socer">
        <h3>Share with friends:</h3>
        <input type="text" class="txt txt-link share-result" value="{{ url('<current>') }}"/>
        <div class="ss-social">
            <a href="#" class="btn btn-coppy-url share-result">
                <span class="icon-copy"></span>
                Copy URL
            </a>
            <div class="ss-share a2a_kit">
                <span>&nbsp; </span>
                <a class="a2a_button_facebook" href="#"><i class="fa fa-facebook"></i></a>
                <a class="a2a_button_twitter" href="#"><i class="fa fa-twitter"></i></a>
                <a class="a2a_button_google_plus" href="#"><i class="fa fa-google-plus"></i></a>
                {#<a href="#"><i class="fa fa-weibo"></i></a>#}
            </div>
        </div>
    </div>
</article>
<!--comment-->

<div class="comments">
    <div class="box-caption box-caption-margin">
        <p>{{ 'Comments:'|t }} </p>
    </div>
    {{ content.field_comments }}
</div>

{% if related %}
    {{ related }}
{% endif %}
